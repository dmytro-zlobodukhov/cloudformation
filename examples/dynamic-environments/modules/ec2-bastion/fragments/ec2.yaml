---
AWSTemplateFormatVersion: '2010-09-09'

Description: This template creates EC2 Instance and related resources.

# Metadata:
#   template metadata

Parameters:
  EnvironmentName:
    Description: Name of the environment to deploy (dev, test, prod, etc.).
    Type: String
    Default: bastion
  EnvironmentType:
    Description: Type of the environment to deploy (shared, owned, dedicated, etc.).
    Type: String
    Default: shared
  SubnetId:
    Description: The Subnet id to place the EC2 in.
    Type: String
  VpcId:
    Description: The VPC id to place the EC2 in.
    Type: String
  InstanceName:
    Description: Name of the EC2 Instance to deploy.
    Type: String
    Default: vpn
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
    Description: EC2 Instance type/size. Default is t3.micro.
  InstanceStorageType:
    Type: String
    Default: gp3
    AllowedValues:
      - gp3
      - gp2
      - io1
      - io2
    Description: "Type of the attached EBS volume. Default is gp3."
  InstanceStorageSize:
    Type: String
    Default: 10
    Description: "The size of the attached EBS volume. Default is 10 GB."
  InstanceOS:
    Type: String
    Default: Ubuntu2004
    AllowedValues:
      - Ubuntu1804
      - Ubuntu2004
      - AmazonLinux2
    Description: "Desired Operating System. Default is Ubuntu 20.04."
  SSHKey:
    Type: String
    Description: The SSH key used to access the instance.
  Route53HostedZoneName:
    Description: "Name of the Route53 hosted zone"
    Type: String
  RDSSecurityGroupId:
    Description: ID of the RDS security group.
    Type: String
  RDSPort:
    Description: Default RDS port number
    Type: String
    Default: 3306
  RedisSecurityGroupId:
    Description: ID of the Redis security group.
    Type: String
  RedisPort:
    Description: Default Redis port number
    Type: String
    Default: 6379

# Rules:
#   set of rules

Mappings:
  RegionAndInstanceTypeToAMIID:
      us-east-1:
        Ubuntu1804: "ami-0e472ba40eb589f49"
        Ubuntu2004: "ami-04505e74c0741db8d"
        AmazonLinux2: "ami-0c02fb55956c7d316"
      us-east-2:
        Ubuntu1804: "ami-03a0c45ebc70f98ea"
        Ubuntu2004: "ami-0fb653ca2d3203ac1"
        AmazonLinux2: "ami-064ff912f78e3e561"
      us-west-1:
        Ubuntu1804: "ami-009726b835c24a3aa"
        Ubuntu2004: "ami-01f87c43e618bf8f0"
        AmazonLinux2: "ami-04a50faf2a2ec1901"
      us-west-2:
        Ubuntu1804: "ami-074251216af698218"
        Ubuntu2004: "ami-0892d3c7ee96c0bf7"
        AmazonLinux2: "ami-00ee4df451840fa9d"

# Conditions:
#   set of conditions

# Transform:
#   set of transforms

Resources:
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', [!Sub '${EnvironmentType}-${EnvironmentName}-${InstanceName}-sg', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      GroupDescription: 'Security group for dedicated environment EC2 Instance'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "Allow access to HTTP"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: "Allow access to HTTPS"
        # - IpProtocol: tcp
        #   FromPort: 22
        #   ToPort: 22
        #   CidrIp: 0.0.0.0/0
        #   Description: "Allow access to SSH"
        - IpProtocol: udp
          FromPort: 11054
          ToPort: 11054
          CidrIp: 0.0.0.0/0
          Description: "Allow access to OpenVPN protocol"
        - IpProtocol: udp
          FromPort: 21054
          ToPort: 21054
          CidrIp: 0.0.0.0/0
          Description: "Allow access to WireGuard protocol"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ['-', [!Sub '${EnvironmentType}-${EnvironmentName}-${InstanceName}', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]], "sg"]]
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EC2Instance
      Tags:
        - Key: Name
          Value: !Join ['-', [!Sub '${EnvironmentType}-${EnvironmentName}-${InstanceName}', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]], "ip"]]
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Sub '${EnvironmentType}-${EnvironmentName}-${InstanceName}', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]], "instance-role"]]
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ['-', [!Sub '${EnvironmentType}-${EnvironmentName}-${InstanceName}', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]], "instance-profile"]]
      Path: /
      Roles:
       - !Ref EC2InstanceRole
  EC2InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join ['-', [!Sub '${EnvironmentType}-${EnvironmentName}-${InstanceName}', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]], 'launch-template']]
      LaunchTemplateData:
        KeyName: !Ref SSHKey
        DisableApiTermination: false
        ImageId: !FindInMap [RegionAndInstanceTypeToAMIID, !Ref "AWS::Region", !Ref InstanceOS]
        InstanceType: !Ref InstanceType
        Monitoring:
          Enabled: false
        EbsOptimized: true
        # InstanceMarketOptions:
        #   MarketType: spot
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref EC2InstanceSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: !Ref InstanceStorageSize
              VolumeType: !Ref InstanceStorageType
        UserData:
          Fn::Base64: |
            #!/bin/bash

            sudo dd if=/dev/zero of=/swapfile bs=128M count=16
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo "/swapfile swap swap defaults 0 0" >> /etc/fstab

            sudo apt update && sudo apt upgrade -y

            sudo tee /etc/apt/sources.list.d/pritunl.list << EOF
            deb http://repo.pritunl.com/stable/apt focal main
            EOF

            # Import signing key from keyserver
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv 7568D9BB55FF9E5287D586017AE645C0CF8E292A
            # Alternative import from download if keyserver offline
            curl https://raw.githubusercontent.com/pritunl/pgp/master/pritunl_repo_pub.asc | sudo apt-key add -

            sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list << EOF
            deb https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse
            EOF

            curl https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -

            sudo apt update

            # WireGuard server support
            sudo apt -y install wireguard wireguard-tools dkms

            sudo ufw disable

            sudo apt -y install pritunl mongodb mysql-client
            sudo systemctl enable mongodb pritunl
            sudo systemctl start mongodb pritunl

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref SubnetId
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2InstanceLaunchTemplate
        Version: 1
      Tags:
        - Key: Name
          Value: !Join ['-', [!Sub '${EnvironmentType}-${EnvironmentName}-${InstanceName}', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]], "instance"]]
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Join ['.', [!Sub '${EnvironmentName}', !Sub '${Route53HostedZoneName}', '']]
      Type: A
      HostedZoneName: !Join ['.', [!Sub '${Route53HostedZoneName}', '']]
      ResourceRecords:
      - !Ref ElasticIP
      TTL: 300
  EC2InstanceAllowAccessToRDS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: !Sub "Allow access from ${EnvironmentName} to RDS."
      GroupId: !Ref RDSSecurityGroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt EC2InstanceSecurityGroup.GroupId
      ToPort: !Ref RDSPort
      FromPort: !Ref RDSPort
  EC2InstanceAllowAccessToRedis:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: !Sub "Allow access from ${EnvironmentName} to Redis."
      GroupId: !Ref RedisSecurityGroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt EC2InstanceSecurityGroup.GroupId
      ToPort: !Ref RedisPort
      FromPort: !Ref RedisPort


Outputs:
  PublicIp:
    Value:
      Fn::GetAtt:
        - EC2Instance
        - PublicIp
    Description: Server's PublicIp Address